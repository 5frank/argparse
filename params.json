{"name":"Argparse","tagline":"Command-line arguments parsing library.","body":"NAME\r\n====\r\n\r\nargparse - A command line arguments parsing library.\r\n\r\n[![Build Status](https://travis-ci.org/Cofyc/argparse.png)](https://travis-ci.org/Cofyc/argparse)\r\n\r\nDESCRIPTION\r\n===========\r\n\r\nThis module is inspired by parse-options.c (git) and python's argparse\r\nmodule.\r\n\r\nArguments parsing is common task in cli program, but traditional `getopt`\r\nlibraries are not easy to use. This library provides high-level arguments\r\nparsing solutions.\r\n\r\nThe program defines what arguments it requires, and `argparse` will figure\r\nout how to parse those out of `argc` and `argv`, it also automatically\r\ngenerates help and usage messages and issues errors when users give the\r\nprogram invalid arguments.\r\n\r\nFeatures\r\n========\r\n\r\n - handles both optional and positional arguments\r\n - produces highly informative usage messages\r\n - issures errors when given invalid arguments\r\n\r\nThere are basically three types of options:\r\n\r\n - boolean options\r\n - options with mandatory argument\r\n - options with optional argument\r\n\r\nThere are basically two forms of options:\r\n\r\n - short option consist of one dash (`-`) and one alphanumeric character.\r\n - long option begin with two dashes (`--`) and some alphanumeric characters.\r\n\r\nShort options may be bundled, e.g. `-a -b` can be specified as `-ab`.\r\n\r\nOptions are case-sensitive.\r\n\r\nOptions and non-option arguments can clearly be separated using the `--` option.\r\n\r\nExamples\r\n========\r\n\r\n```c\r\n#include \"argparse.h\"\r\n\r\nstatic const char *const usage[] = {\r\n   \"test_argparse [options] [[--] args]\",\r\n   NULL,\r\n};\r\n\r\nint\r\nmain(int argc, const char **argv)\r\n{\r\n   int force = 0;\r\n   int num = 0;\r\n   const char *path = NULL;\r\n   struct argparse_option options[] = {\r\n       OPT_HELP(),\r\n       OPT_BOOLEAN('f', \"force\", &force, \"force to do\", NULL),\r\n       OPT_STRING('p', \"path\", &path, \"path to read\", NULL),\r\n       OPT_INTEGER('n', \"num\", &num, \"selected num\", NULL),\r\n       OPT_END(),\r\n   };\r\n   struct argparse argparse;\r\n   argparse_init(&argparse, options, usage, 0);\r\n   argc = argparse_parse(&argparse, argc, argv);\r\n   if (force != 0)\r\n       printf(\"force: %d\\n\", force);\r\n   if (path != NULL)\r\n       printf(\"path: %s\\n\", path);\r\n   if (num != 0)\r\n       printf(\"num: %d\\n\", num);\r\n   if (argc != 0) {\r\n       printf(\"argc: %d\\n\", argc);\r\n       int i;\r\n       for (i = 0; i < argc; i++) {\r\n           printf(\"argv[%d]: %s\\n\", i, *(argv + i));\r\n       }\r\n   }\r\n   return 0;\r\n}\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}